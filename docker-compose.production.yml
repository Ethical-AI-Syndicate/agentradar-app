version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgis/postgis:15-3.3
    container_name: agentradar-postgres
    environment:
      POSTGRES_DB: agentradar
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./api/database/postgres-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./backups:/backups
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - agentradar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d agentradar"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: agentradar-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - agentradar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # API Server
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: production
    container_name: agentradar-api
    environment:
      NODE_ENV: production
      PORT: 4000
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/agentradar
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://app.agentradar.app}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      SENTRY_DSN: ${SENTRY_DSN}
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      MAILGUN_API_KEY: ${MAILGUN_API_KEY}
      MAILGUN_DOMAIN: ${MAILGUN_DOMAIN}
    volumes:
      - ./api/logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "${API_PORT:-4000}:4000"
    networks:
      - agentradar-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MCP Server
  mcp-server:
    build:
      context: ./mcp-integrations
      dockerfile: Dockerfile
    container_name: agentradar-mcp
    environment:
      NODE_ENV: production
      ENABLE_MOCK_DATA: false
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/agentradar
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      LOG_LEVEL: ${LOG_LEVEL:-info}
      SCRAPER_MAX_CONCURRENT: ${SCRAPER_MAX_CONCURRENT:-3}
      SCRAPER_DELAY_MS: ${SCRAPER_DELAY_MS:-2000}
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
    volumes:
      - ./mcp-integrations/logs:/app/logs
      - ./mcp-integrations/cache:/app/cache
    networks:
      - agentradar-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "/app/health-check.js"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # Scraper Workers
  scrapers:
    build:
      context: ./scrapers
      dockerfile: Dockerfile
    container_name: agentradar-scrapers
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/agentradar
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/2
      SCRAPER_SCHEDULE: ${SCRAPER_SCHEDULE:-0 */6 * * *}
      MAX_CONCURRENT_SCRAPERS: ${MAX_CONCURRENT_SCRAPERS:-5}
      USER_AGENT: ${USER_AGENT:-AgentRadar/1.0 (+https://agentradar.app)}
    volumes:
      - ./scrapers/logs:/app/logs
      - ./scrapers/cache:/app/cache
    networks:
      - agentradar-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Web Application (Production Build)
  web:
    build:
      context: ./web-app
      dockerfile: Dockerfile
      target: production
    container_name: agentradar-web
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://api.agentradar.app}
      NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
      NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN}
      NEXT_PUBLIC_APP_VERSION: ${APP_VERSION:-1.0.0}
    ports:
      - "${WEB_PORT:-3000}:3000"
    networks:
      - agentradar-network
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: agentradar-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - agentradar-network
    depends_on:
      - web
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring & Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: agentradar-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - agentradar-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: agentradar-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: https://monitoring.agentradar.app
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    networks:
      - agentradar-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: agentradar-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - agentradar-network
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: agentradar-promtail
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - ./api/logs:/app/logs/api:ro
      - ./mcp-integrations/logs:/app/logs/mcp:ro
      - ./scrapers/logs:/app/logs/scrapers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - agentradar-network
    depends_on:
      - loki
    restart: unless-stopped

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: agentradar-backup
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: agentradar
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - agentradar-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    command: sh -c "crond && tail -f /var/log/cron.log"

networks:
  agentradar-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local