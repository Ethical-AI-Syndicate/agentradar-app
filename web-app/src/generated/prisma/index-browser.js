
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  password: 'password',
  phone: 'phone',
  isActive: 'isActive',
  role: 'role',
  subscriptionTier: 'subscriptionTier',
  stripeCustomerId: 'stripeCustomerId',
  subscriptionId: 'subscriptionId',
  subscriptionStatus: 'subscriptionStatus',
  subscriptionCurrentPeriodEnd: 'subscriptionCurrentPeriodEnd',
  company: 'company',
  location: 'location',
  teamSize: 'teamSize',
  monthlyDeals: 'monthlyDeals',
  primaryFocus: 'primaryFocus',
  techComfort: 'techComfort',
  currentChallenges: 'currentChallenges',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLogin: 'lastLogin'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  stripePriceId: 'stripePriceId',
  price: 'price',
  currency: 'currency',
  interval: 'interval',
  tier: 'tier',
  features: 'features',
  maxAlerts: 'maxAlerts',
  maxUsers: 'maxUsers',
  isActive: 'isActive',
  isPopular: 'isPopular',
  displayOrder: 'displayOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AlertScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  address: 'address',
  city: 'city',
  province: 'province',
  postalCode: 'postalCode',
  alertType: 'alertType',
  source: 'source',
  status: 'status',
  priority: 'priority',
  opportunityScore: 'opportunityScore',
  timelineMonths: 'timelineMonths',
  propertyType: 'propertyType',
  estimatedValue: 'estimatedValue',
  lotSize: 'lotSize',
  bedrooms: 'bedrooms',
  bathrooms: 'bathrooms',
  courtFileNumber: 'courtFileNumber',
  courtDate: 'courtDate',
  courtCaseId: 'courtCaseId',
  probateNumber: 'probateNumber',
  executorName: 'executorName',
  executorContact: 'executorContact',
  applicationNumber: 'applicationNumber',
  municipalOffice: 'municipalOffice',
  applicationDate: 'applicationDate',
  latitude: 'latitude',
  longitude: 'longitude',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  discoveredAt: 'discoveredAt'
};

exports.Prisma.UserAlertScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  alertId: 'alertId',
  isNotified: 'isNotified',
  notifiedAt: 'notifiedAt',
  isViewed: 'isViewed',
  viewedAt: 'viewedAt',
  isBookmarked: 'isBookmarked',
  createdAt: 'createdAt'
};

exports.Prisma.AlertPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  cities: 'cities',
  maxDistanceKm: 'maxDistanceKm',
  propertyTypes: 'propertyTypes',
  minValue: 'minValue',
  maxValue: 'maxValue',
  minBedrooms: 'minBedrooms',
  maxBedrooms: 'maxBedrooms',
  alertTypes: 'alertTypes',
  minPriority: 'minPriority',
  minOpportunityScore: 'minOpportunityScore',
  emailNotifications: 'emailNotifications',
  smsNotifications: 'smsNotifications',
  pushNotifications: 'pushNotifications',
  maxAlertsPerDay: 'maxAlertsPerDay',
  quietHoursStart: 'quietHoursStart',
  quietHoursEnd: 'quietHoursEnd',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SavedPropertyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  alertId: 'alertId',
  notes: 'notes',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.EarlyAdopterTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  company: 'company',
  location: 'location',
  teamSize: 'teamSize',
  monthlyDeals: 'monthlyDeals',
  primaryFocus: 'primaryFocus',
  currentChallenges: 'currentChallenges',
  techComfort: 'techComfort',
  isUsed: 'isUsed',
  usedAt: 'usedAt',
  userId: 'userId',
  discountPercent: 'discountPercent',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourtCaseScalarFieldEnum = {
  id: 'id',
  guid: 'guid',
  title: 'title',
  neutralCitation: 'neutralCitation',
  court: 'court',
  publishDate: 'publishDate',
  caseUrl: 'caseUrl',
  summary: 'summary',
  fullText: 'fullText',
  addresses: 'addresses',
  municipalities: 'municipalities',
  parties: 'parties',
  statutes: 'statutes',
  caseTypes: 'caseTypes',
  riskLevel: 'riskLevel',
  isProcessed: 'isProcessed',
  nerProcessed: 'nerProcessed',
  classified: 'classified',
  source: 'source',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CaseProcessingQueueScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  processType: 'processType',
  status: 'status',
  priority: 'priority',
  attempts: 'attempts',
  maxAttempts: 'maxAttempts',
  error: 'error',
  scheduledAt: 'scheduledAt',
  startedAt: 'startedAt',
  completedAt: 'completedAt'
};

exports.Prisma.SupportTicketScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  category: 'category',
  assignedToId: 'assignedToId',
  resolution: 'resolution',
  resolvedAt: 'resolvedAt',
  resolvedBy: 'resolvedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupportTicketMessageScalarFieldEnum = {
  id: 'id',
  ticketId: 'ticketId',
  userId: 'userId',
  message: 'message',
  isFromAdmin: 'isFromAdmin',
  attachments: 'attachments',
  createdAt: 'createdAt'
};

exports.Prisma.AdminActionScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  action: 'action',
  targetType: 'targetType',
  targetId: 'targetId',
  description: 'description',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SystemSettingScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.SubscriptionTier = exports.$Enums.SubscriptionTier = {
  FREE: 'FREE',
  SOLO_AGENT: 'SOLO_AGENT',
  PROFESSIONAL: 'PROFESSIONAL',
  TEAM_ENTERPRISE: 'TEAM_ENTERPRISE',
  WHITE_LABEL: 'WHITE_LABEL'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PAST_DUE: 'PAST_DUE',
  CANCELLED: 'CANCELLED',
  TRIALING: 'TRIALING',
  INCOMPLETE: 'INCOMPLETE'
};

exports.AlertType = exports.$Enums.AlertType = {
  POWER_OF_SALE: 'POWER_OF_SALE',
  ESTATE_SALE: 'ESTATE_SALE',
  DEVELOPMENT_APPLICATION: 'DEVELOPMENT_APPLICATION',
  MUNICIPAL_PERMIT: 'MUNICIPAL_PERMIT',
  PROBATE_FILING: 'PROBATE_FILING',
  TAX_SALE: 'TAX_SALE'
};

exports.DataSource = exports.$Enums.DataSource = {
  ONTARIO_COURT_BULLETINS: 'ONTARIO_COURT_BULLETINS',
  ESTATE_FILINGS: 'ESTATE_FILINGS',
  MUNICIPAL_APPLICATIONS: 'MUNICIPAL_APPLICATIONS',
  DEVELOPMENT_PERMITS: 'DEVELOPMENT_PERMITS',
  TAX_OFFICE: 'TAX_OFFICE',
  MANUAL_ENTRY: 'MANUAL_ENTRY'
};

exports.AlertStatus = exports.$Enums.AlertStatus = {
  ACTIVE: 'ACTIVE',
  RESOLVED: 'RESOLVED',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.ActivityType = exports.$Enums.ActivityType = {
  USER_LOGIN: 'USER_LOGIN',
  USER_LOGOUT: 'USER_LOGOUT',
  ALERT_VIEWED: 'ALERT_VIEWED',
  ALERT_BOOKMARKED: 'ALERT_BOOKMARKED',
  PROPERTY_SAVED: 'PROPERTY_SAVED',
  SEARCH_PERFORMED: 'SEARCH_PERFORMED',
  PREFERENCES_UPDATED: 'PREFERENCES_UPDATED',
  SUBSCRIPTION_CHANGED: 'SUBSCRIPTION_CHANGED'
};

exports.CourtType = exports.$Enums.CourtType = {
  ONSC: 'ONSC',
  ONCA: 'ONCA',
  ONCJ: 'ONCJ',
  ONSCDC: 'ONSCDC',
  OLT: 'OLT'
};

exports.RiskLevel = exports.$Enums.RiskLevel = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.RealEstateCaseType = exports.$Enums.RealEstateCaseType = {
  FORECLOSURE: 'FORECLOSURE',
  POWER_OF_SALE: 'POWER_OF_SALE',
  LIEN: 'LIEN',
  CONDO: 'CONDO',
  RECEIVERSHIP: 'RECEIVERSHIP',
  PLANNING: 'PLANNING',
  OLT_APPEAL: 'OLT_APPEAL',
  ENVIRONMENTAL: 'ENVIRONMENTAL',
  LABOUR_CONVICTION: 'LABOUR_CONVICTION',
  CONSTRUCTION_LIEN: 'CONSTRUCTION_LIEN',
  PLANNING_ACT: 'PLANNING_ACT',
  BIA_PROCEEDING: 'BIA_PROCEEDING'
};

exports.ProcessingType = exports.$Enums.ProcessingType = {
  NER_EXTRACTION: 'NER_EXTRACTION',
  CASE_CLASSIFICATION: 'CASE_CLASSIFICATION',
  RISK_ASSESSMENT: 'RISK_ASSESSMENT',
  ALERT_GENERATION: 'ALERT_GENERATION'
};

exports.ProcessingStatus = exports.$Enums.ProcessingStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.SupportTicketStatus = exports.$Enums.SupportTicketStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  PENDING_USER: 'PENDING_USER',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED'
};

exports.SupportTicketPriority = exports.$Enums.SupportTicketPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Product: 'Product',
  Alert: 'Alert',
  UserAlert: 'UserAlert',
  AlertPreference: 'AlertPreference',
  SavedProperty: 'SavedProperty',
  ActivityLog: 'ActivityLog',
  EarlyAdopterToken: 'EarlyAdopterToken',
  CourtCase: 'CourtCase',
  CaseProcessingQueue: 'CaseProcessingQueue',
  SupportTicket: 'SupportTicket',
  SupportTicketMessage: 'SupportTicketMessage',
  AdminAction: 'AdminAction',
  SystemSetting: 'SystemSetting'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
