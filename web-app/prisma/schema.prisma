// AgentRadar Database Schema
// Real Estate Intelligence Platform

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  phone     String?
  isActive  Boolean  @default(true)
  role      UserRole @default(USER)
  
  // Subscription info
  subscriptionTier              SubscriptionTier   @default(FREE)
  stripeCustomerId              String?            @unique
  subscriptionId                String?            @unique
  subscriptionStatus            SubscriptionStatus @default(INACTIVE)
  subscriptionCurrentPeriodEnd  DateTime?
  
  // Profile info
  company          String?
  location         String?
  teamSize         String?
  monthlyDeals     String?
  primaryFocus     String?
  techComfort      String?
  currentChallenges String[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?
  
  // Relations
  alertPreferences AlertPreference[]
  userAlerts       UserAlert[]
  savedProperties  SavedProperty[]
  activityLogs     ActivityLog[]
  
  // Admin relations
  supportTickets      SupportTicket[]      @relation("UserTickets")
  assignedTickets     SupportTicket[]      @relation("TicketAssignee")
  ticketMessages      SupportTicketMessage[] @relation("TicketMessages")
  adminActions        AdminAction[]        @relation("AdminActions")
  
  @@map("users")
}

// Product Catalogue
model Product {
  id          String @id @default(cuid())
  name        String
  description String
  stripePriceId String @unique
  
  // Pricing
  price       Decimal @db.Decimal(10, 2)
  currency    String  @default("usd")
  interval    String  // month, year
  
  // Product details
  tier        SubscriptionTier
  features    String[] // Array of feature descriptions
  maxAlerts   Int?     // Max alerts per month/year
  maxUsers    Int?     // Max team members
  
  // Status
  isActive    Boolean @default(true)
  isPopular   Boolean @default(false)
  
  // Display
  displayOrder Int?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("products")
}

// Property Alerts System
model Alert {
  id          String      @id @default(cuid())
  title       String
  description String
  
  // Property details
  address     String
  city        String
  province    String      @default("ON")
  postalCode  String?
  
  // Alert metadata
  alertType   AlertType
  source      DataSource
  status      AlertStatus @default(ACTIVE)
  priority    Priority    @default(MEDIUM)
  
  // Opportunity scoring
  opportunityScore Int     @default(0) // 0-100
  timelineMonths   Int?    // Estimated months to market
  
  // Property details
  propertyType     String?
  estimatedValue   Int?    // In CAD cents
  lotSize          String?
  bedrooms         Int?
  bathrooms        Float?
  
  // Court/Legal info (for power of sale)
  courtFileNumber  String?
  courtDate        DateTime?
  courtCaseId      String? // Link to CourtCase if originated from court data
  
  // Estate info
  probateNumber    String?
  executorName     String?
  executorContact  String?
  
  // Development info
  applicationNumber String?
  municipalOffice  String?
  applicationDate  DateTime?
  
  // Geographic data
  latitude  Float?
  longitude Float?
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  discoveredAt DateTime @default(now())
  
  // Relations  
  userAlerts UserAlert[]
  courtCase  CourtCase? @relation(fields: [courtCaseId], references: [id])
  
  @@map("alerts")
}

// User-Alert Relationship (Many-to-Many)
model UserAlert {
  id       String @id @default(cuid())
  userId   String
  alertId  String
  
  // Notification status
  isNotified   Boolean   @default(false)
  notifiedAt   DateTime?
  isViewed     Boolean   @default(false)
  viewedAt     DateTime?
  isBookmarked Boolean   @default(false)
  
  createdAt DateTime @default(now())
  
  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  alert Alert @relation(fields: [alertId], references: [id], onDelete: Cascade)
  
  @@unique([userId, alertId])
  @@map("user_alerts")
}

// Alert Preferences
model AlertPreference {
  id     String @id @default(cuid())
  userId String
  
  // Geographic preferences
  cities          String[] @default([])
  maxDistanceKm   Int      @default(50)
  
  // Property preferences
  propertyTypes   String[] @default([])
  minValue        Int?     // In CAD cents
  maxValue        Int?     // In CAD cents
  minBedrooms     Int?
  maxBedrooms     Int?
  
  // Alert preferences
  alertTypes      AlertType[]
  minPriority     Priority     @default(LOW)
  minOpportunityScore Int      @default(0)
  
  // Notification preferences
  emailNotifications  Boolean @default(true)
  smsNotifications    Boolean @default(false)
  pushNotifications   Boolean @default(true)
  
  // Timing preferences
  maxAlertsPerDay     Int     @default(10)
  quietHoursStart     String? // "22:00"
  quietHoursEnd       String? // "08:00"
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId])
  @@map("alert_preferences")
}

// Saved Properties
model SavedProperty {
  id       String @id @default(cuid())
  userId   String
  alertId  String
  
  // User notes
  notes    String?
  tags     String[] @default([])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, alertId])
  @@map("saved_properties")
}

// Activity Logging
model ActivityLog {
  id        String       @id @default(cuid())
  userId    String?
  action    ActivityType
  details   Json?        // Flexible JSON field for activity details
  ipAddress String?
  userAgent String?
  
  createdAt DateTime @default(now())
  
  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("activity_logs")
}

// Early Adopter Tokens
model EarlyAdopterToken {
  id       String @id @default(cuid())
  token    String @unique @default(cuid())
  email    String @unique
  
  // Form data
  firstName         String
  lastName          String
  phone             String
  company           String
  location          String
  teamSize          String
  monthlyDeals      String
  primaryFocus      String
  currentChallenges String[]
  techComfort       String
  
  // Token status
  isUsed      Boolean   @default(false)
  usedAt      DateTime?
  userId      String?   @unique
  
  // Benefits
  discountPercent Int @default(50)
  expiresAt       DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("early_adopter_tokens")
}

// Court Bulletin Cases
model CourtCase {
  id              String @id @default(cuid())
  guid            String @unique // CanLII stable identifier
  title           String
  neutralCitation String?
  court           CourtType
  publishDate     DateTime
  caseUrl         String
  
  // Raw case content
  summary         String?
  fullText        String? // Store full case text for NER processing
  
  // NER Extracted Data
  addresses       String[] @default([]) // Extracted property addresses
  municipalities  String[] @default([]) // Extracted municipalities  
  parties         String[] @default([]) // Extracted party names
  statutes        String[] @default([]) // Referenced statutes
  
  // Case Classification
  caseTypes       RealEstateCaseType[] @default([])
  riskLevel       RiskLevel @default(LOW)
  
  // Processing Status
  isProcessed     Boolean @default(false)
  nerProcessed    Boolean @default(false)
  classified      Boolean @default(false)
  
  // Metadata
  source          String // RSS feed source
  metadata        Json? // Additional structured data
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  alerts Alert[] // Cases can trigger multiple alerts
  processingQueue CaseProcessingQueue[] // Processing queue entries for this case
  
  @@index([court, publishDate])
  @@index([isProcessed, nerProcessed])
  @@map("court_cases")
}

// Court Case Processing Queue
model CaseProcessingQueue {
  id          String @id @default(cuid())
  caseId      String
  processType ProcessingType
  status      ProcessingStatus @default(PENDING)
  priority    Int @default(5) // 1-10, higher = more urgent
  
  // Processing details
  attempts    Int @default(0)
  maxAttempts Int @default(3)
  error       String?
  
  // Timing
  scheduledAt DateTime @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  
  // Relations
  case CourtCase @relation(fields: [caseId], references: [id], onDelete: Cascade)
  
  @@index([status, priority])
  @@index([scheduledAt])
  @@map("case_processing_queue")
}

// Enums
enum SubscriptionTier {
  FREE
  SOLO_AGENT
  PROFESSIONAL  
  TEAM_ENTERPRISE
  WHITE_LABEL
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELLED
  TRIALING
  INCOMPLETE
}

enum AlertType {
  POWER_OF_SALE
  ESTATE_SALE
  DEVELOPMENT_APPLICATION
  MUNICIPAL_PERMIT
  PROBATE_FILING
  TAX_SALE
}

enum DataSource {
  ONTARIO_COURT_BULLETINS
  ESTATE_FILINGS
  MUNICIPAL_APPLICATIONS
  DEVELOPMENT_PERMITS
  TAX_OFFICE
  MANUAL_ENTRY
}

enum AlertStatus {
  ACTIVE
  RESOLVED
  EXPIRED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ActivityType {
  USER_LOGIN
  USER_LOGOUT
  ALERT_VIEWED
  ALERT_BOOKMARKED
  PROPERTY_SAVED
  SEARCH_PERFORMED
  PREFERENCES_UPDATED
  SUBSCRIPTION_CHANGED
}

enum CourtType {
  ONSC      // Ontario Superior Court of Justice
  ONCA      // Ontario Court of Appeal  
  ONCJ      // Ontario Court of Justice
  ONSCDC    // Ontario Superior Court of Justice - Divisional Court
  OLT       // Ontario Land Tribunal (formerly OMB)
}

enum RealEstateCaseType {
  FORECLOSURE
  POWER_OF_SALE
  LIEN
  CONDO
  RECEIVERSHIP
  PLANNING
  OLT_APPEAL
  ENVIRONMENTAL
  LABOUR_CONVICTION
  CONSTRUCTION_LIEN
  PLANNING_ACT
  BIA_PROCEEDING
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProcessingType {
  NER_EXTRACTION
  CASE_CLASSIFICATION
  RISK_ASSESSMENT
  ALERT_GENERATION
}

enum ProcessingStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}

enum SupportTicketStatus {
  OPEN
  IN_PROGRESS
  PENDING_USER
  RESOLVED
  CLOSED
}

enum SupportTicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Support Ticket System
model SupportTicket {
  id          String                 @id @default(cuid())
  userId      String
  title       String
  description String
  status      SupportTicketStatus    @default(OPEN)
  priority    SupportTicketPriority  @default(MEDIUM)
  category    String?                // billing, technical, feature_request
  
  // Admin assignment
  assignedToId String?
  assignedTo   User?   @relation("TicketAssignee", fields: [assignedToId], references: [id])
  
  // Resolution
  resolution  String?
  resolvedAt  DateTime?
  resolvedBy  String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User                   @relation("UserTickets", fields: [userId], references: [id], onDelete: Cascade)
  messages  SupportTicketMessage[]
  
  @@map("support_tickets")
}

model SupportTicketMessage {
  id         String  @id @default(cuid())
  ticketId   String
  userId     String
  message    String
  isFromAdmin Boolean @default(false)
  
  // Attachments
  attachments String[] @default([])
  
  // Timestamps
  createdAt DateTime @default(now())
  
  // Relations
  ticket SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user   User          @relation("TicketMessages", fields: [userId], references: [id])
  
  @@map("support_ticket_messages")
}

// Admin Action Logging
model AdminAction {
  id          String @id @default(cuid())
  adminId     String
  action      String  // create_user, update_subscription, etc.
  targetType  String  // user, alert, ticket
  targetId    String?
  description String
  metadata    Json?   // Additional action data
  
  // Timestamps
  createdAt DateTime @default(now())
  
  // Relations
  admin User @relation("AdminActions", fields: [adminId], references: [id])
  
  @@map("admin_actions")
}

// System Settings
model SystemSetting {
  id          String @id @default(cuid())
  key         String @unique
  value       String
  description String?
  category    String? // email, notifications, api
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("system_settings")
}
