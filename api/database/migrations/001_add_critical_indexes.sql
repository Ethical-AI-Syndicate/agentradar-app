-- AgentRadar Critical Database Indexes Migration
-- Generated by Enterprise SaaS Development Framework
-- Addresses Phase 1 Performance Analysis findings
-- Expected performance improvement: 3-5x query performance

-- ============================================================================
-- ALERTS TABLE PERFORMANCE INDEXES
-- ============================================================================

-- Critical index for alert filtering by status and priority
-- Used in: GET /api/alerts, alert matching algorithms
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_alerts_status_priority 
ON alerts(status, priority);

-- Geographic and type-based filtering for location-specific alerts
-- Used in: Location-based alert queries, city filtering
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_alerts_city_type 
ON alerts(city, "alertType");

-- Opportunity score sorting for high-value alerts
-- Used in: Personalized alert recommendations, scoring algorithms
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_alerts_opportunity_score 
ON alerts("opportunityScore" DESC);

-- Time-based queries for recent alerts
-- Used in: Dashboard recent alerts, time-based filtering
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_alerts_created_at 
ON alerts("createdAt" DESC);

-- Geographic queries with lat/lng for radius searches
-- Used in: Location-based searches, proximity calculations
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_alerts_location 
ON alerts(latitude, longitude) WHERE latitude IS NOT NULL AND longitude IS NOT NULL;

-- ============================================================================
-- USER_ALERTS RELATIONSHIP OPTIMIZATION
-- ============================================================================

-- User-specific alert queries with time ordering
-- Used in: User dashboard, personal alert history
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_alerts_user_created 
ON user_alerts("userId", "createdAt" DESC);

-- Notification status queries for alert delivery
-- Used in: Notification system, unread alerts
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_alerts_notified 
ON user_alerts("userId", "isNotified", "notifiedAt");

-- Bookmark status for saved alerts
-- Used in: Bookmarked alerts retrieval, user saved items
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_alerts_bookmarked 
ON user_alerts("userId", "isBookmarked") WHERE "isBookmarked" = true;

-- ============================================================================
-- USER PREFERENCES OPTIMIZATION
-- ============================================================================

-- User preference lookups for alert matching
-- Used in: Alert matching algorithm, user settings
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_alert_preferences_user 
ON alert_preferences("userId");

-- Active preferences for alert processing
-- Used in: Alert matcher service performance optimization
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_alert_preferences_active 
ON alert_preferences("userId") WHERE "alertTypes" IS NOT NULL;

-- ============================================================================
-- ADMIN OPERATIONS OPTIMIZATION
-- ============================================================================

-- Activity log queries by user and time
-- Used in: Admin dashboard, user activity tracking
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_activity_logs_user_created 
ON activity_logs("userId", "createdAt" DESC);

-- Support ticket management
-- Used in: Admin support dashboard, ticket prioritization
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_support_tickets_status 
ON support_tickets(status, priority);

-- Support ticket assignment queries
-- Used in: Admin assignment workflows
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_support_tickets_assigned 
ON support_tickets("assignedToId") WHERE "assignedToId" IS NOT NULL;

-- ============================================================================
-- COURT DATA PROCESSING OPTIMIZATION
-- ============================================================================

-- Court case processing status tracking
-- Used in: MCP integration, court data pipeline
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_court_cases_processed 
ON court_cases("isProcessed", "nerProcessed");

-- Court case queuing for processing
-- Used in: Background processing queue
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_court_cases_queue 
ON case_processing_queue(status, priority, "createdAt");

-- ============================================================================
-- USER MANAGEMENT OPTIMIZATION
-- ============================================================================

-- Active user queries for alert matching
-- Used in: Alert distribution, active user counting
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_active_role 
ON users("isActive", role) WHERE "isActive" = true;

-- Subscription tier queries for feature gating
-- Used in: Feature access control, billing operations
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_subscription_tier 
ON users("subscriptionTier", "isActive");

-- Stripe customer lookups
-- Used in: Payment processing, billing operations
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_stripe_customer 
ON users("stripeCustomerId") WHERE "stripeCustomerId" IS NOT NULL;

-- ============================================================================
-- VALIDATION AND MONITORING
-- ============================================================================

-- Add index usage tracking for monitoring
COMMENT ON INDEX idx_alerts_status_priority IS 'Critical: Alert filtering performance - Expected 5x improvement';
COMMENT ON INDEX idx_alerts_city_type IS 'High: Geographic alert filtering - Expected 3x improvement';
COMMENT ON INDEX idx_alerts_opportunity_score IS 'High: Alert scoring performance - Expected 4x improvement';
COMMENT ON INDEX idx_user_alerts_user_created IS 'Critical: User dashboard performance - Expected 8x improvement';

-- Performance monitoring query for index effectiveness
-- Run this after migration to verify index usage:
/*
SELECT 
    schemaname,
    tablename,
    indexname,
    idx_scan as index_scans,
    idx_tup_read as tuples_read,
    idx_tup_fetch as tuples_fetched
FROM pg_stat_user_indexes 
WHERE indexname LIKE 'idx_%'
ORDER BY idx_scan DESC;
*/

-- Migration completion timestamp
-- SELECT NOW() as migration_completed;