name: Branch Protection & Quality Enforcement

# CRITICAL: Enforces enterprise-grade branch protection and quality standards
# TARGET: Zero defects reach main branch, mandatory code review process

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]
  push:
    branches: [feature/*, hotfix/*]

env:
  # Quality enforcement thresholds
  MIN_COVERAGE: 95
  MAX_CODE_COMPLEXITY: 10
  MAX_TECH_DEBT_RATIO: 0.05
  MAX_SECURITY_HOTSPOTS: 0

jobs:
  # Phase 1: PR Quality Validation
  pr-quality-check:
    name: üîç Pull Request Quality Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 10
    
    steps:
      - name: üìÇ Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: üìù PR Title & Description Validation
        run: |
          echo "üìù Validating PR title and description..."
          
          # Get PR title and description
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          
          echo "PR Title: $PR_TITLE"
          
          # Validate PR title format (e.g., "feat: Add user authentication")
          if [[ ! "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|test|chore|perf|ci)(\(.+\))?: .+ ]]; then
            echo "‚ùå QUALITY GATE FAILED: PR title must follow conventional commits format"
            echo "Format: type(scope): description"
            echo "Types: feat, fix, docs, style, refactor, test, chore, perf, ci"
            exit 1
          fi
          
          # Validate PR description exists and has minimum content
          if [[ -z "$PR_BODY" || ${#PR_BODY} -lt 50 ]]; then
            echo "‚ùå QUALITY GATE FAILED: PR description must be at least 50 characters"
            echo "Please provide detailed description of changes"
            exit 1
          fi
          
          echo "‚úÖ PR title and description validation passed"

      - name: üìä Changed Files Analysis
        run: |
          echo "üìä Analyzing changed files..."
          
          # Get list of changed files
          git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD > changed_files.txt
          
          echo "Changed files:"
          cat changed_files.txt
          
          # Validate file types and naming conventions
          while IFS= read -r file; do
            echo "Checking: $file"
            
            # Skip deleted files
            if [[ ! -f "$file" ]]; then
              continue
            fi
            
            # Validate TypeScript/JavaScript files
            if [[ "$file" =~ \.(ts|tsx|js|jsx)$ ]]; then
              # Check for TODO/FIXME comments
              if grep -n "TODO\|FIXME\|XXX\|HACK" "$file" > /dev/null 2>&1; then
                echo "‚ö†Ô∏è Warning: Technical debt markers found in $file"
              fi
              
              # Check for console.log in non-test files
              if [[ ! "$file" =~ test|spec ]] && grep -n "console\.log" "$file" > /dev/null 2>&1; then
                echo "‚ö†Ô∏è Warning: console.log found in production code: $file"
              fi
            fi
            
            # Validate test coverage for new files
            if [[ "$file" =~ ^api/src/ && "$file" =~ \.(ts|js)$ && ! "$file" =~ test|spec ]]; then
              # Check if corresponding test file exists
              test_file="${file//src/__tests__}"
              test_file="${test_file//.ts/.test.ts}"
              
              if [[ ! -f "$test_file" ]]; then
                echo "‚ö†Ô∏è Warning: No test file found for $file"
                echo "Expected: $test_file"
              fi
            fi
            
          done < changed_files.txt
          
          echo "‚úÖ File analysis completed"

      - name: üîí Security Impact Assessment
        run: |
          echo "üîí Assessing security impact of changes..."
          
          # Check for security-sensitive file changes
          security_sensitive_patterns="auth|password|token|secret|key|crypto|security|middleware|validation"
          
          if grep -E "$security_sensitive_patterns" changed_files.txt > /dev/null; then
            echo "üîí Security-sensitive files detected in PR:"
            grep -E "$security_sensitive_patterns" changed_files.txt
            echo ""
            echo "‚ö†Ô∏è This PR requires security review"
            echo "::notice title=Security Review Required::This PR modifies security-sensitive files and requires additional review"
          fi
          
          # Check for hardcoded secrets in diff
          git diff origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E "(password|secret|key|token).*=" > secrets_check.txt || true
          
          if [[ -s secrets_check.txt ]]; then
            echo "‚ùå SECURITY GATE FAILED: Potential hardcoded secrets detected"
            cat secrets_check.txt
            exit 1
          fi
          
          echo "‚úÖ Security impact assessment completed"

      - name: üìè Code Complexity Analysis
        run: |
          echo "üìè Analyzing code complexity..."
          
          # Install dependencies for complexity analysis
          cd api && npm ci --prefer-offline
          
          # Run complexity analysis on changed files
          complexity_violations=0
          
          while IFS= read -r file; do
            if [[ "$file" =~ ^api/src/.*\.(ts|js)$ && -f "$file" ]]; then
              # Simple complexity check (line count as proxy)
              lines=$(wc -l < "$file")
              
              if [[ $lines -gt 500 ]]; then
                echo "‚ö†Ô∏è High complexity: $file ($lines lines)"
                complexity_violations=$((complexity_violations + 1))
              fi
            fi
          done < changed_files.txt
          
          if [[ $complexity_violations -gt 3 ]]; then
            echo "‚ùå COMPLEXITY GATE FAILED: Too many high-complexity files"
            exit 1
          fi
          
          echo "‚úÖ Code complexity analysis passed"

      - name: üß™ Quick Test Validation
        run: |
          echo "üß™ Running quick test validation..."
          
          cd api
          
          # Run only tests related to changed files
          npm test -- --passWithNoTests --findRelatedTests $(cat ../changed_files.txt | grep -E "\.(ts|js)$" | tr '\n' ' ')
          
          echo "‚úÖ Related tests passed"

  # Phase 2: Merge Conflict Prevention
  merge-conflict-check:
    name: üîÑ Merge Conflict Prevention
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: üìÇ Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîÑ Test Merge Feasibility
        run: |
          echo "üîÑ Testing merge feasibility..."
          
          # Fetch latest base branch
          git fetch origin ${{ github.event.pull_request.base.ref }}
          
          # Test if merge would create conflicts
          if ! git merge-tree $(git merge-base HEAD origin/${{ github.event.pull_request.base.ref }}) HEAD origin/${{ github.event.pull_request.base.ref }} > /dev/null; then
            echo "‚ùå MERGE CONFLICT DETECTED"
            echo "Please resolve conflicts before merging"
            exit 1
          fi
          
          echo "‚úÖ No merge conflicts detected"

  # Phase 3: Automated Code Review
  automated-code-review:
    name: ü§ñ Automated Code Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 15
    
    steps:
      - name: üìÇ Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: üì¶ Install Dependencies
        working-directory: ./api
        run: npm ci --prefer-offline

      - name: ü§ñ ESLint Auto-Review
        run: |
          echo "ü§ñ Running automated ESLint review..."
          
          cd api
          
          # Run ESLint with JSON output for parsing
          npm run lint -- --format json --output-file ../eslint-results.json || true
          
          cd ..
          
          # Parse results and create review comments
          node -e "
            const results = require('./eslint-results.json');
            let hasErrors = false;
            
            results.forEach(file => {
              if (file.errorCount > 0 || file.warningCount > 0) {
                console.log(\`üìÑ \${file.filePath}:\`);
                
                file.messages.forEach(msg => {
                  const severity = msg.severity === 2 ? '‚ùå' : '‚ö†Ô∏è';
                  console.log(\`   \${severity} Line \${msg.line}: \${msg.message} (\${msg.ruleId})\`);
                  
                  if (msg.severity === 2) {
                    hasErrors = true;
                  }
                });
                console.log('');
              }
            });
            
            if (hasErrors) {
              console.log('‚ùå AUTOMATED REVIEW FAILED: ESLint errors must be fixed');
              process.exit(1);
            }
            
            console.log('‚úÖ Automated code review passed');
          "

      - name: üîç TypeScript Type Safety Review
        run: |
          echo "üîç Reviewing TypeScript type safety..."
          
          cd api
          npm run type-check
          
          cd ../web-app
          npm ci --prefer-offline
          npm run build
          
          echo "‚úÖ TypeScript type safety review passed"

      - name: üìä Test Coverage Impact
        run: |
          echo "üìä Analyzing test coverage impact..."
          
          cd api
          
          # Run tests with coverage
          npm run test:coverage -- --passWithNoTests
          
          # Check if coverage meets minimum threshold
          node -e "
            const coverage = require('./coverage/coverage-summary.json');
            const total = coverage.total;
            
            console.log('üìä Current Coverage:');
            console.log(\`   Lines: \${total.lines.pct}%\`);
            console.log(\`   Functions: \${total.functions.pct}%\`);
            console.log(\`   Branches: \${total.branches.pct}%\`);
            console.log(\`   Statements: \${total.statements.pct}%\`);
            
            if (total.lines.pct < ${{ env.MIN_COVERAGE }}) {
              console.log('‚ùå COVERAGE GATE FAILED: Coverage below minimum threshold');
              console.log('Please add tests to improve coverage');
              process.exit(1);
            }
            
            console.log('‚úÖ Test coverage requirements met');
          "

  # Phase 4: Performance Impact Analysis
  performance-impact:
    name: ‚ö° Performance Impact Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 10
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: agentradar_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: üìÇ Checkout Code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: üì¶ Install Dependencies
        working-directory: ./api
        run: npm ci --prefer-offline

      - name: üóÑÔ∏è Setup Test Database
        working-directory: ./api
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/agentradar_test
          JWT_SECRET: test-jwt-secret
        run: |
          npx prisma migrate deploy
          node database/migrate-indexes.js development

      - name: ‚ö° Performance Regression Test
        working-directory: ./api
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/agentradar_test
          JWT_SECRET: test-jwt-secret
          NODE_ENV: test
        run: |
          echo "‚ö° Running performance regression tests..."
          
          # Run performance tests and capture results
          npm run test:performance -- --json > performance-results.json || true
          
          # Analyze performance results
          node -e "
            const results = JSON.parse(require('fs').readFileSync('performance-results.json', 'utf8'));
            
            console.log('‚ö° Performance Test Results:');
            console.log(\`   Tests: \${results.numTotalTests}\`);
            console.log(\`   Passed: \${results.numPassedTests}\`);
            console.log(\`   Failed: \${results.numFailedTests}\`);
            
            if (results.numFailedTests > 0) {
              console.log('‚ùå PERFORMANCE REGRESSION DETECTED');
              console.log('Performance tests failed - check for regressions');
              process.exit(1);
            }
            
            console.log('‚úÖ No performance regressions detected');
          "

  # Phase 5: Final PR Status Check
  pr-status-check:
    name: üìã PR Status Summary
    runs-on: ubuntu-latest
    needs: [pr-quality-check, merge-conflict-check, automated-code-review, performance-impact]
    if: always() && github.event_name == 'pull_request'
    
    steps:
      - name: üìã Generate PR Status Summary
        run: |
          echo "üìã PULL REQUEST STATUS SUMMARY"
          echo "============================================="
          echo "PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}"
          echo "Base: ${{ github.event.pull_request.base.ref }} ‚Üê Head: ${{ github.event.pull_request.head.ref }}"
          echo ""
          
          # Check job results
          quality_check="${{ needs.pr-quality-check.result }}"
          merge_check="${{ needs.merge-conflict-check.result }}"
          code_review="${{ needs.automated-code-review.result }}"
          performance="${{ needs.performance-impact.result }}"
          
          echo "üîç Quality Check: $quality_check"
          echo "üîÑ Merge Check: $merge_check" 
          echo "ü§ñ Code Review: $code_review"
          echo "‚ö° Performance: $performance"
          echo ""
          
          # Determine overall status
          if [[ "$quality_check" == "success" && "$merge_check" == "success" && "$code_review" == "success" && "$performance" == "success" ]]; then
            echo "‚úÖ PR STATUS: READY FOR REVIEW"
            echo "All quality gates passed - PR is ready for human review"
          else
            echo "‚ùå PR STATUS: REQUIRES FIXES"
            echo "Some quality gates failed - please address issues before review"
            exit 1
          fi

  # Phase 6: Feature Branch Quality Enforcement
  feature-branch-check:
    name: üîß Feature Branch Quality Check
    runs-on: ubuntu-latest
    if: contains(github.ref, 'feature/') || contains(github.ref, 'hotfix/')
    timeout-minutes: 15
    
    steps:
      - name: üìÇ Checkout Code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: üì¶ Install Dependencies
        working-directory: ./api
        run: npm ci --prefer-offline

      - name: üîß Feature Branch Validation
        run: |
          echo "üîß Validating feature branch quality..."
          
          cd api
          
          # Run linting
          npm run lint
          echo "‚úÖ Linting passed"
          
          # Type checking
          npm run type-check
          echo "‚úÖ Type checking passed"
          
          # Build verification
          npm run build
          echo "‚úÖ Build successful"
          
          # Quick tests
          npm test -- --passWithNoTests --maxWorkers=2
          echo "‚úÖ Tests passed"
          
          echo "üéâ Feature branch quality validation completed"

      - name: üåê Web App Quality Check
        working-directory: ./web-app
        run: |
          echo "üåê Checking web app quality..."
          
          npm ci --prefer-offline
          
          # Linting
          npm run lint
          echo "‚úÖ Web app linting passed"
          
          # Build check
          npm run build
          echo "‚úÖ Web app build successful"
          
          # Tests
          npm test
          echo "‚úÖ Web app tests passed"

  # Summary workflow
  branch-protection-summary:
    name: üõ°Ô∏è Branch Protection Summary
    runs-on: ubuntu-latest
    needs: [pr-quality-check, merge-conflict-check, automated-code-review, performance-impact, pr-status-check, feature-branch-check]
    if: always()
    
    steps:
      - name: üõ°Ô∏è Branch Protection Summary
        run: |
          echo "üõ°Ô∏è BRANCH PROTECTION & QUALITY ENFORCEMENT SUMMARY"
          echo "===================================================="
          echo "üéØ Target: Enterprise-grade quality enforcement"
          echo "üîç Quality Gates: Automated validation"
          echo "ü§ñ Code Review: AI-powered analysis"
          echo "‚ö° Performance: Regression detection"
          echo "üìä Coverage: ${{ env.MIN_COVERAGE }}%+ requirement"
          echo "üîí Security: Comprehensive scanning"
          echo ""
          echo "‚úÖ BRANCH PROTECTION STATUS: ACTIVE"
          echo "üõ°Ô∏è Quality enforcement operational!"