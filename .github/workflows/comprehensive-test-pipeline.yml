name: Comprehensive Test Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Pre-flight checks
  pre-flight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.changes.outputs.api }}
      web-changed: ${{ steps.changes.outputs.web }}
      docs-only: ${{ steps.changes.outputs.docs }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api:
              - 'api/**'
              - 'shared/**'
            web:
              - 'web-app/**'
              - 'shared/**'
            docs:
              - '*.md'
              - 'docs/**'

  # Code quality and security audit
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.docs-only != 'true'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'api/package-lock.json'
      
      - name: Install API dependencies
        run: |
          cd api
          npm ci
      
      - name: Run ESLint
        run: |
          cd api
          npm run lint
      
      - name: Run TypeScript check
        run: |
          cd api
          npm run type-check
      
      - name: Security audit
        run: |
          cd api
          npm audit --audit-level moderate
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Unit and integration tests
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [pre-flight, code-quality]
    if: needs.pre-flight.outputs.api-changed == 'true'
    
    strategy:
      matrix:
        test-type: [unit, integration, security]
        node-version: [18, 20]
      fail-fast: false
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: agentradar_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'api/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd api
          npm ci
      
      - name: Setup test environment
        run: |
          cd api
          cp .env.test .env.local
          echo "DATABASE_URL=postgresql://test_user:test_pass@localhost:5432/agentradar_test" >> .env.local
          echo "REDIS_URL=redis://localhost:6379/1" >> .env.local
          echo "JWT_SECRET=test-jwt-secret-for-ci-pipeline-only" >> .env.local
          echo "NODE_ENV=test" >> .env.local
          echo "ENABLE_EXTERNAL_SERVICES=false" >> .env.local
      
      - name: Generate Prisma client
        run: |
          cd api
          npx prisma generate
      
      - name: Run database migrations
        run: |
          cd api
          npx prisma migrate deploy
          npx prisma db seed
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/agentradar_test
      
      - name: Run ${{ matrix.test-type }} tests
        run: |
          cd api
          case "${{ matrix.test-type }}" in
            "unit")
              npm run test:unit
              ;;
            "integration")
              npm run test:integration
              ;;
            "security")
              npm run test:security
              ;;
          esac
        env:
          COLLECT_COVERAGE: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}-node${{ matrix.node-version }}
          path: |
            api/coverage/
            api/test-results/
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./api/coverage/lcov.info
          flags: ${{ matrix.test-type }}-node${{ matrix.node-version }}
          name: ${{ matrix.test-type }}-coverage

  # Performance testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [pre-flight, code-quality]
    if: needs.pre-flight.outputs.api-changed == 'true' && github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: agentradar_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'api/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd api
          npm ci
      
      - name: Setup test environment
        run: |
          cd api
          cp .env.test .env.local
          echo "DATABASE_URL=postgresql://test_user:test_pass@localhost:5432/agentradar_test" >> .env.local
          echo "REDIS_URL=redis://localhost:6379/1" >> .env.local
          echo "NODE_ENV=test" >> .env.local
      
      - name: Generate Prisma client and migrate
        run: |
          cd api
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/agentradar_test
      
      - name: Run performance tests
        run: |
          cd api
          npm run test:performance
        env:
          PERFORMANCE_TEST_DURATION: 60000  # 1 minute for CI
          PERFORMANCE_CONCURRENT_USERS: 50  # Reduced for CI environment
      
      - name: Generate performance report
        run: |
          cd api
          npm run test:performance:report
      
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            api/performance-report/
            api/coverage/performance/
      
      - name: Performance regression check
        run: |
          cd api
          npm run test:performance:regression
        continue-on-error: true

  # E2E tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [pre-flight, test-suite]
    if: needs.pre-flight.outputs.api-changed == 'true' && needs.pre-flight.outputs.web-changed == 'true'
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: agentradar_test
        ports:
          - 5432:5432
      
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install API dependencies
        run: |
          cd api
          npm ci
      
      - name: Install Web dependencies
        run: |
          cd web-app
          npm ci
      
      - name: Setup test environment
        run: |
          cd api
          cp .env.test .env.local
          echo "DATABASE_URL=postgresql://test_user:test_pass@localhost:5432/agentradar_test" >> .env.local
          echo "REDIS_URL=redis://localhost:6379/1" >> .env.local
          echo "NODE_ENV=test" >> .env.local
      
      - name: Start API server
        run: |
          cd api
          npx prisma generate
          npx prisma migrate deploy
          npm run build
          npm start &
          sleep 10
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/agentradar_test
      
      - name: Start Web server
        run: |
          cd web-app
          npm run build
          npm start &
          sleep 10
        env:
          NEXT_PUBLIC_API_URL: http://localhost:4000
      
      - name: Install Playwright
        run: npx playwright install --with-deps
      
      - name: Run E2E tests
        run: |
          cd e2e-tests
          npm ci
          npm run test
      
      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: |
            e2e-tests/test-results/
            e2e-tests/playwright-report/

  # Coverage analysis
  coverage-analysis:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    needs: test-suite
    if: always() && needs.test-suite.result != 'skipped'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: ./test-results
          merge-multiple: true
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install coverage tools
        run: npm install -g nyc
      
      - name: Merge coverage reports
        run: |
          cd api
          npx nyc merge coverage/ coverage/merged.json
          npx nyc report --reporter=lcov --reporter=text-summary --report-dir=coverage/final
      
      - name: Coverage quality gate
        run: |
          cd api
          node scripts/check-coverage-threshold.js
      
      - name: Generate coverage badge
        run: |
          cd api
          node scripts/generate-coverage-badge.js
      
      - name: Upload final coverage
        uses: actions/upload-artifact@v4
        with:
          name: final-coverage
          path: api/coverage/final/

  # Quality gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality, test-suite, performance-tests, coverage-analysis]
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: |
          cd api
          npm ci
      
      - name: Run quality gate checks
        run: |
          cd api
          npm run quality:gate
      
      - name: Generate quality report
        run: |
          cd api
          npm run quality:report
      
      - name: Quality gate decision
        run: |
          cd api
          node scripts/quality-gate-decision.js
        env:
          MIN_COVERAGE: 95
          MAX_RESPONSE_TIME: 200
          MAX_ERROR_RATE: 0.1
      
      - name: Upload quality report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: api/quality-report/

  # Deployment preparation
  deployment-prep:
    name: Deployment Preparation
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: github.ref == 'refs/heads/main' && needs.quality-gate.result == 'success'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Build API
        run: |
          cd api
          npm ci
          npm run build
      
      - name: Build Web App
        run: |
          cd web-app
          npm ci
          npm run build
      
      - name: Create deployment artifacts
        run: |
          mkdir -p deployment/
          tar -czf deployment/api-build.tar.gz api/dist/ api/package*.json api/prisma/
          tar -czf deployment/web-build.tar.gz web-app/.next/ web-app/package*.json web-app/public/
      
      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: deployment/
          retention-days: 30

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality-gate, deployment-prep]
    if: always() && github.event_name == 'pull_request'
    
    steps:
      - name: PR Comment - Success
        if: needs.quality-gate.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ **Quality Gate Passed**
              
              All tests passed and quality thresholds met:
              - Unit Tests: ✅
              - Integration Tests: ✅  
              - Security Tests: ✅
              - Performance Tests: ✅
              - Coverage: ✅ (>95%)
              
              Ready for review and merge! 🚀`
            })
      
      - name: PR Comment - Failure
        if: needs.quality-gate.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ **Quality Gate Failed**
              
              Some quality checks did not pass. Please review the failed checks:
              
              Check the [Actions tab](${context.payload.repository.html_url}/actions/runs/${context.runId}) for detailed results.
              
              Common issues:
              - Test failures
              - Coverage below 95%
              - Performance regression
              - Security vulnerabilities
              
              Please fix the issues and push updates.`
            })

# Cleanup job for artifact management
  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [notify]
    if: always()
    
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Get artifacts older than 7 days
            const sevenDaysAgo = new Date();
            sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
            
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner,
              repo,
              per_page: 100
            });
            
            for (const artifact of artifacts.data.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < sevenDaysAgo) {
                await github.rest.actions.deleteArtifact({
                  owner,
                  repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            }